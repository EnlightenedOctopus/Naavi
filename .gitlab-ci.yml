image: maven:3-jdk-8 # default container image to use for tasks

# task setting up maven properties
before_script:  
  - echo '<settings
            xmlns="http://maven.apache.org/SETTINGS/1.0.0" 
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
            https://maven.apache.org/xsd/settings-1.0.0.xsd">
              <mirrors>
                  <mirror>               
                    <id>ensisa</id>               
                    <name>Nexus ENSISA</name>               
                    <url>https://nexus.cluster.ensisa.uha.fr/repository/maven-public/</url> 
                    <mirrorOf>*</mirrorOf>
                  </mirror>           
                </mirrors>         
              </settings>' > settings.xml
# Various reusable properties
variables:
  MAVEN_CLI_OPTS: "--batch-mode -s settings.xml -Dmaven.repo.local=libs"
  # Folders to be reused from tasks to tasks

cache:
  paths:    
    - "libs" # jars downloaded and installed by Maven    
    - "**/target" # results of Maven commands
# List of stages
stages:  
  - build  
  - test
  - integration-test
  - deploy
  - run

# Task: Compiling
compile:
  stage: build
  script: # many commands can appear here (as an array)
    - mvn $MAVEN_CLI_OPTS clean compile

# Task: testing
test:
  stage: test
  script:    
    - mvn $MAVEN_CLI_OPTS test
  artifacts: # results of the stage
    paths:      
      - "**/target/surefire-reports/*"
    reports:
      junit:        
        - "**/target/surefire-reports/TEST-*.xml"
# Task : integration testing
integration-test:
  services: 
    - selenium/standalone-firefox:3.141.59
  stage: integration-test
  script:
    - mvn $MAVEN_CLI_OPTS -f spring-mvc-archetype -Dselenium.remote.browser=firefox -Dmaven.test.skip=true verify
  artifacts:
    paths:
      - "**/target/surefire-reports/*"
    reports:
      junit:
        - "**/target/surefire-reports/TEST-*.xml"

deploy-docker:
  stage: deploy
  image: docker:latest # Image containing the Docker cli
  services:
  - name: docker:dind # Adds a running Docker daemon
    command: ["--registry-mirror=https://docker.cluster.ensisa.uha.fr"]
  variables:
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - WARFILE=$(find . -name '*.war' -path '*/target/*' -print0)
    # Check https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
    - IMG_NAME="registry.cluster.ensisa.uha.fr/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}"
    - docker pull -q jetty:9-jdk8-slim
    - |
        echo "FROM jetty:9-jdk8-slim
        EXPOSE 8080
        ADD $WARFILE \${JETTY_BASE}/webapps/${CI_PROJECT_NAMESPACE}-${CI_PROJECT_NAME}.war
        " > Dockerfile
    - cat Dockerfile
    - docker build -t $IMG_NAME .
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} registry.cluster.ensisa.uha.fr
    - docker push $IMG_NAME

.kubernetes: &kubernetes
  stage: run
  image: docker-private.cluster.ensisa.uha.fr/docker/kubectl
  script:
    # Setup kubectl
    - kubectl config set-cluster k8s --server="${K8S_SERVER}" --certificate-authority=${K8S_CERTIFICATE_AUTHORITY}
    - kubectl config set-credentials gitlab-ci --token="${K8S_USER_TOKEN}"
    - kubectl config set-context default --cluster=k8s --user=gitlab-ci
    - kubectl config use-context default

    # Kubernetes deployment file
    - APP_NAME="${CI_PROJECT_NAMESPACE}-${CI_PROJECT_NAME}"
    - NAMESPACE="gitlab-cd-${ENV}"
    - IMG_NAME="${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${CI_COMMIT_TAG:-latest}"
    - |
        echo "
        apiVersion: v1
        kind: Secret
        metadata:
          name: $APP_NAME-registry-secret
          namespace: $NAMESPACE
        type: kubernetes.io/dockerconfigjson
        data:
          .dockerconfigjson: $(echo -n "{\"auths\":{\"${CI_REGISTRY}\":{\"username\":\"${CI_DEPLOY_USER}\",\"password\":\"${CI_DEPLOY_PASSWORD}\",\"auth\":\"$( echo -n "${CI_DEPLOY_USER}:${CI_DEPLOY_PASSWORD}" | base64 )\"}}}" | base64 -w 0)
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          labels:
            app: $APP_NAME
          name: $APP_NAME
          namespace: $NAMESPACE
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: $APP_NAME
          template:
            metadata:
              labels:
                app: $APP_NAME
            spec:
              containers:
                - image: $IMG_NAME
                  imagePullPolicy: Always
                  name: $APP_NAME
                  ports:
                    - name: http
                      containerPort: 8080
              imagePullSecrets:
                - name: $APP_NAME-registry-secret
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: $APP_NAME-service
          namespace: $NAMESPACE
        spec:
          type: ClusterIP
          selector:
            app: $APP_NAME
          ports:
            - name: http
              protocol: TCP
              port: 80
              targetPort: 8080
        ---
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: $APP_NAME-ingress
          namespace: $NAMESPACE
        spec:
          rules:
          - host: ${ENV}.cluster.ensisa.uha.fr
            http:
              paths:
              - path: /$APP_NAME
                pathType: Prefix
                backend:
                  service:
                    name: $APP_NAME-service
                    port:
                      number: 80
        " > app.yml
    - cat app.yml

    # Deploy the yml
    - kubectl ${ACTION} -f app.yml
    - kubectl -n $NAMESPACE rollout restart deployment $APP_NAME 2>/dev/null || /bin/true

deploy-staging:
  <<: *kubernetes
  variables:
    ENV: staging
    ACTION: apply
  environment:
    name: staging
    url: https://staging.cluster.ensisa.uha.fr/${CI_PROJECT_NAMESPACE}-${CI_PROJECT_NAME}
    on_stop: stop-staging

deploy-prod:
  <<: *kubernetes
  variables:
    ENV: prod
    ACTION: apply
  when: manual
  environment:
    name: production
    url: https://prod.cluster.ensisa.uha.fr/${CI_PROJECT_NAMESPACE}-${CI_PROJECT_NAME}
    on_stop: stop-prod

stop-staging:
  <<: *kubernetes
  variables:
    ENV: staging
    ACTION: delete
  when: manual
  environment:
    name: staging
    action: stop

stop-prod:
  <<: *kubernetes
  variables:
    ENV: prod
    ACTION: delete
  when: manual
  environment:
    name: production
    action: stop
